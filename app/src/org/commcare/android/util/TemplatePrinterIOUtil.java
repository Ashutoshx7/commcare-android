package org.commcare.android.util;

import android.util.Log;

import org.commcare.android.crypt.CryptUtil;
import org.commcare.dalvik.activities.TemplatePrinterActivity;
import org.commcare.dalvik.application.CommCareApplication;
import org.javarosa.core.io.BufferedInputStream;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.zip.ZipOutputStream;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

/**
 * Provides all necessary IO for the TemplatePrinterActivity, for writing to and reading from
 * an encrypted file location
 *
 * @author amstone
 */
public class TemplatePrinterIOUtil {

    private final static SecretKey KEY = CryptUtil.generateSemiRandomKey();

    /**
     * Writes the given string, encrypted, to the file location specified
     *
     * @param fileText the content to write
     * @param outputPath the path of the file to write to
     * @throws IOException
     */
    public static void writeStringToFile(String fileText, String outputPath) throws IOException {
        try {
            Cipher encrypter = Cipher.getInstance("AES");
            encrypter.init(Cipher.ENCRYPT_MODE, KEY);
            FileOutputStream fos = new FileOutputStream(new File(outputPath));
            CipherOutputStream cos = new CipherOutputStream(fos, encrypter);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(cos));
            out.write(fileText);
            out.close();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    /**
     * Reads back from the encrypted file generated by the above and returns a string
     * representation of the file's contents
     *
     * @param readFromPath the path to the file from which to read
     * @return a string representation of the file's contents
     */
    public static String readStringFromFile(String readFromPath) throws IOException {
        try {
            Cipher decrypter = Cipher.getInstance("AES");
            decrypter.init(Cipher.DECRYPT_MODE, KEY);
            FileInputStream fis = new FileInputStream(new File(readFromPath));
            CipherInputStream cis = new CipherInputStream(fis, decrypter);
            BufferedReader reader = new BufferedReader(new InputStreamReader(cis));
            String docString = "";
            String line;
            while ((line = reader.readLine()) != null) {
                docString += line;
            }
            reader.close();
            return docString;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }


}
