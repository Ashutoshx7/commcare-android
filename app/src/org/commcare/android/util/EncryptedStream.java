package org.commcare.android.util;

import org.commcare.android.crypt.CryptUtil;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.zip.ZipOutputStream;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

/**
 * Provides an output stream to write encyrypted in ZIP format to the specified file location,
 * as well as an input stream to read back decrypted from that file.
 *
 * @author amstone
 */
public class EncryptedStream {

    /**
     * The file that is being written to and then read from
     */
    private File file;
    private SecretKey key;

    public EncryptedStream() {
    }

    public void initialize(File file) {
        this.file = file;
        this.key = CryptUtil.generateSemiRandomKey();
    }

    /**
     * Create an output stream that writes to the given file in ZIP format and encrypts what is
     * being written
     *
     * @return The output stream
     */
    public ZipOutputStream getOutputStream() {
        try {
            Cipher encrypter = Cipher.getInstance("AES");
            encrypter.init(Cipher.ENCRYPT_MODE, key);
            FileOutputStream fos = new FileOutputStream(this.file);
            CipherOutputStream cos = new CipherOutputStream(fos, encrypter);
            return new ZipOutputStream(cos);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    /**
     * Create an input stream to read back from the file generated by the above output stream
     *
     * @return The input stream
     */
    public CipherInputStream getInputStream() {
        try {
            Cipher decrypter = Cipher.getInstance("AES");
            decrypter.init(Cipher.DECRYPT_MODE, this.key);
            FileInputStream fis = new FileInputStream(this.file);
            CipherInputStream cis = new CipherInputStream(fis, decrypter);
            return cis;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

}
